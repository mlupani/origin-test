{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport twelvedata, { apikey } from '../api/twelvedataAPI';\n\nconst useActionsDetails = (optionSelected, intervalo, actionSelected) => {\n  _s();\n\n  const [timeInterval, setTimeInterval] = useState();\n  const [error, setError] = useState('');\n  const [values, setValues] = useState([]);\n  const [desde, setDesde] = useState('');\n  const [hasta, setHasta] = useState('');\n  useEffect(() => {\n    return () => {\n      clearInterval(timeInterval);\n    };\n  }, []);\n\n  const graficar = async () => {\n    const time = setInterval(() => loadValues(), intervalo * 60000);\n    setTimeInterval(time);\n    clearInterval(time);\n  };\n\n  const loadValues = async () => {\n    clearInterval(timeInterval);\n    setError('');\n    let newValues = [];\n\n    if (optionSelected === 0) {\n      try {\n        console.log(`https://api.twelvedata.com/time_series?symbol=${actionSelected.symbol}&interval=${intervalo}min&apikey=${apikey}`);\n        const res = await twelvedata.get(`https://api.twelvedata.com/time_series?symbol=${actionSelected.symbol}&interval=${intervalo}min&apikey=${apikey}`);\n        newValues = res.data.values.map(({\n          datetime,\n          open\n        }) => {\n          const d = new Date(datetime);\n          const date = d.getHours() + ':' + (d.getMinutes() < 10 ? '0' : '') + d.getMinutes();\n          return {\n            date,\n            value: +open\n          };\n        });\n        setValues(newValues.reverse().slice(newValues.length - 5, newValues.length));\n        graficar();\n      } catch (error) {\n        console.log(`https://api.twelvedata.com/time_series?symbol=${actionSelected.symbol}&interval=${intervalo}min&apikey=${apikey}`);\n        console.log(error);\n      }\n    }\n\n    if (optionSelected === 1) {\n      if (desde.trim() === '' || hasta.trim() === '') {\n        setError('Por favor seleccione una fecha de inicio y de fin');\n        return false;\n      }\n\n      const date_desde = new Date(desde);\n      const date_hasta = new Date(hasta);\n\n      if (date_desde > date_hasta) {\n        setError('Por favor seleccione una fecha de inicio menor a la de fin');\n        return false;\n      }\n\n      try {\n        const res = await twelvedata.get(`https://api.twelvedata.com/time_series?symbol=${actionSelected.symbol}&interval=${intervalo}min&start_date=${desde}%2009:48:00&end_date=${hasta}%2019:48:00&apikey=${apikey}`);\n        newValues = res.data.values.map(({\n          datetime,\n          open\n        }) => {\n          const d = new Date(datetime);\n          const date = d.getHours() + ':' + (d.getMinutes() < 10 ? '0' : '') + d.getMinutes();\n          return {\n            date,\n            value: +open\n          };\n        });\n        setValues(newValues.reverse().slice(newValues.length - 5, newValues.length));\n        graficar();\n      } catch (error) {\n        console.log(`https://api.twelvedata.com/time_series?symbol=${actionSelected.symbol}&interval=${intervalo}min&start_date=${desde}%2009:48:00&end_date=${hasta}%2019:48:00&apikey=${apikey}`);\n        console.log(error);\n      }\n    }\n  };\n\n  return {\n    values,\n    error,\n    setDesde,\n    setHasta\n  };\n};\n\n_s(useActionsDetails, \"nrtOMthveYllXmzeTauxJcnp6c0=\");\n\nexport default useActionsDetails;","map":{"version":3,"sources":["C:/Users/xenei/Desktop/origin-test/client/src/hooks/useActionsDetails.tsx"],"names":["useState","useEffect","twelvedata","apikey","useActionsDetails","optionSelected","intervalo","actionSelected","timeInterval","setTimeInterval","error","setError","values","setValues","desde","setDesde","hasta","setHasta","clearInterval","graficar","time","setInterval","loadValues","newValues","console","log","symbol","res","get","data","map","datetime","open","d","Date","date","getHours","getMinutes","value","reverse","slice","length","trim","date_desde","date_hasta"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport twelvedata, {apikey} from '../api/twelvedataAPI';\r\n\r\ninterface act {\r\n    id: number,\r\n    id_user: number,\r\n    symbol: string\r\n    name: string,\r\n    currency: string,\r\n}\r\n\r\nconst useActionsDetails = (optionSelected: number, intervalo: number, actionSelected: any) => {\r\n\r\n    const [timeInterval, setTimeInterval] = useState<any>()\r\n    const [error, setError] = useState('')\r\n    const [values, setValues] = useState<any>([])\r\n    const [desde, setDesde] = useState('')\r\n    const [hasta, setHasta] = useState('')\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            clearInterval(timeInterval)\r\n        }\r\n    }, [])\r\n\r\n    const graficar = async () => {\r\n        const time = setInterval(() => loadValues(),intervalo * 60000)\r\n        setTimeInterval(time)\r\n        clearInterval(time)\r\n    }\r\n\r\n    const loadValues = async () => {\r\n\r\n        clearInterval(timeInterval)\r\n        setError('')\r\n        let newValues = [];\r\n\r\n        if(optionSelected === 0){\r\n            try {\r\n                console.log(`https://api.twelvedata.com/time_series?symbol=${actionSelected.symbol}&interval=${intervalo}min&apikey=${apikey}`);\r\n                const res = await twelvedata.get(`https://api.twelvedata.com/time_series?symbol=${actionSelected.symbol}&interval=${intervalo}min&apikey=${apikey}`)\r\n                newValues = res.data.values.map(({datetime,open}: any) => {\r\n                    const d = new Date(datetime)\r\n                    const date = d.getHours()+':'+(d.getMinutes()<10?'0':'') + d.getMinutes();\r\n                    return {date, value: +open }\r\n                })\r\n\r\n                setValues(newValues.reverse().slice(newValues.length - 5,newValues.length))\r\n                graficar()\r\n            } catch (error) {\r\n                console.log(`https://api.twelvedata.com/time_series?symbol=${actionSelected.symbol}&interval=${intervalo}min&apikey=${apikey}`);\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        if(optionSelected === 1){\r\n\r\n            if(desde.trim() === '' || hasta.trim() === '') {\r\n                setError('Por favor seleccione una fecha de inicio y de fin')\r\n                return false;\r\n            }\r\n\r\n            const date_desde = new Date(desde);\r\n            const date_hasta = new Date(hasta);\r\n\r\n            if(date_desde > date_hasta){\r\n                setError('Por favor seleccione una fecha de inicio menor a la de fin')\r\n                return false;\r\n            }\r\n\r\n            try {\r\n                const res = await twelvedata.get(`https://api.twelvedata.com/time_series?symbol=${actionSelected.symbol}&interval=${intervalo}min&start_date=${desde}%2009:48:00&end_date=${hasta}%2019:48:00&apikey=${apikey}`)\r\n                newValues = res.data.values.map(({datetime,open}: any) => {\r\n                    const d = new Date(datetime)\r\n                    const date = d.getHours()+':'+(d.getMinutes()<10?'0':'') + d.getMinutes();\r\n                    return {date, value: +open }\r\n                })\r\n                setValues(newValues.reverse().slice(newValues.length - 5,newValues.length))\r\n                graficar()\r\n            } catch (error) {\r\n                console.log(`https://api.twelvedata.com/time_series?symbol=${actionSelected.symbol}&interval=${intervalo}min&start_date=${desde}%2009:48:00&end_date=${hasta}%2019:48:00&apikey=${apikey}`);\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return {\r\n        values,\r\n        error,\r\n        setDesde,\r\n        setHasta\r\n    }\r\n}\r\n\r\nexport default useActionsDetails\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext, useCallback } from 'react';\nimport twelvedata from '../api/twelvedataAPI';\nimport users from '../api/users';\nimport { userContext } from '../context/UserContext';\n\nconst useGetActions = () => {\n  _s();\n\n  const [actions, setActions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const {\n    user\n  } = useContext(userContext);\n  const [actionsUser, setActionsUser] = useState([]);\n\n  const loadActions = async () => {\n    try {\n      const res = await twelvedata.get('https://api.twelvedata.com/stocks?source=docs&exchange=BMV');\n      setActions(res.data.data);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const loadActionsUser = useCallback(async () => {\n    try {\n      const res = await users.get(`/getActionsUser?user=${user.id}`);\n      setActionsUser(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }, [user]);\n  useEffect(() => {\n    loadActions();\n    loadActionsUser();\n  }, [loadActionsUser]);\n  return {\n    actions,\n    actionsUser,\n    isLoading,\n    loadActionsUser\n  };\n};\n\n_s(useGetActions, \"JLRglLlUx7Xi081BnhYIpH50zeU=\");\n\nexport default useGetActions;","map":{"version":3,"sources":["C:/Users/xenei/Desktop/origin-test/client/src/hooks/useGetActions.tsx"],"names":["useState","useEffect","useContext","useCallback","twelvedata","users","userContext","useGetActions","actions","setActions","isLoading","setIsLoading","user","actionsUser","setActionsUser","loadActions","res","get","data","error","console","log","loadActionsUser","id"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0CC,WAA1C,QAA6D,OAA7D;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAExB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAY,EAAZ,CAAtC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAWV,UAAU,CAACI,WAAD,CAA3B;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAY,EAAZ,CAA9C;;AAEA,QAAMe,WAAW,GAAG,YAAY;AAC5B,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMZ,UAAU,CAACa,GAAX,CAAuB,4DAAvB,CAAlB;AACAR,MAAAA,UAAU,CAACO,GAAG,CAACE,IAAJ,CAASA,IAAV,CAAV;AACAP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAJD,CAIE,OAAOQ,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GARD;;AAUA,QAAMG,eAAe,GAAGnB,WAAW,CAAC,YAAY;AAC5C,QAAI;AACA,YAAMa,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAW,wBAAuBL,IAAI,CAACW,EAAG,EAA1C,CAAlB;AACAT,MAAAA,cAAc,CAACE,GAAG,CAACE,IAAL,CAAd;AACH,KAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAPkC,EAOjC,CAACP,IAAD,CAPiC,CAAnC;AASAX,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,WAAW;AACXO,IAAAA,eAAe;AAClB,GAHQ,EAGN,CAACA,eAAD,CAHM,CAAT;AAKA,SAAO;AACHd,IAAAA,OADG;AAEHK,IAAAA,WAFG;AAGHH,IAAAA,SAHG;AAIHY,IAAAA;AAJG,GAAP;AAMH,CArCD;;GAAMf,a;;AAuCN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect, useContext, useCallback } from 'react';\r\nimport twelvedata from '../api/twelvedataAPI';\r\nimport users from '../api/users';\r\nimport { Actions, Result } from '../interfaces/twelvedataAPI';\r\nimport { userContext } from '../context/UserContext';\r\n\r\nconst useGetActions = () => {\r\n\r\n    const [actions, setActions] = useState<Actions[]>([]);\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const { user } = useContext(userContext);\r\n    const [actionsUser, setActionsUser] = useState<Actions[]>([]);\r\n\r\n    const loadActions = async () => {\r\n        try {\r\n            const res = await twelvedata.get<Result>('https://api.twelvedata.com/stocks?source=docs&exchange=BMV');\r\n            setActions(res.data.data)\r\n            setIsLoading(false)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const loadActionsUser = useCallback(async () => {\r\n        try {\r\n            const res = await users.get(`/getActionsUser?user=${user.id}`);\r\n            setActionsUser(res.data)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    },[user])\r\n\r\n    useEffect(() => {\r\n        loadActions();\r\n        loadActionsUser();\r\n    }, [loadActionsUser])\r\n\r\n    return {\r\n        actions,\r\n        actionsUser,\r\n        isLoading,\r\n        loadActionsUser\r\n    }\r\n}\r\n\r\nexport default useGetActions\r\n"]},"metadata":{},"sourceType":"module"}
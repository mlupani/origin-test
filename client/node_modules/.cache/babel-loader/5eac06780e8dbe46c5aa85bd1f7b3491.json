{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport twelvedata from '../api/twelvedataAPI';\n\nconst useGetActions = () => {\n  _s();\n\n  const [actions, setActions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const loadActions = async () => {\n    try {\n      const res = await twelvedata.get('https://api.twelvedata.com/stocks?source=docs&exchange=BMV');\n      setActions(res.data.data);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    loadActions();\n  }, []);\n  return {\n    actions,\n    isLoading\n  };\n};\n\n_s(useGetActions, \"eu2ZZc6w1eBXiy5vE3V+idDb0TU=\");\n\nexport default useGetActions;","map":{"version":3,"sources":["C:/Users/xenei/Desktop/origin-test/client/src/hooks/useGetActions.tsx"],"names":["useState","useEffect","twelvedata","useGetActions","actions","setActions","isLoading","setIsLoading","loadActions","res","get","data","error","console","log"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;;AAGA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAExB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAY,EAAZ,CAAtC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;;AAEA,QAAMQ,WAAW,GAAG,YAAY;AAC5B,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMP,UAAU,CAACQ,GAAX,CAAuB,4DAAvB,CAAlB;AACAL,MAAAA,UAAU,CAACI,GAAG,CAACE,IAAJ,CAASA,IAAV,CAAV;AACAJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAJD,CAIE,OAAOK,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GARD;;AAUAX,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,WAAW;AACd,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AACHJ,IAAAA,OADG;AAEHE,IAAAA;AAFG,GAAP;AAIH,CAvBD;;GAAMH,a;;AAyBN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport twelvedata from '../api/twelvedataAPI';\r\nimport { Actions, Result } from '../interfaces/twelvedataAPI';\r\n\r\nconst useGetActions = () => {\r\n\r\n    const [actions, setActions] = useState<Actions[]>([]);\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    const loadActions = async () => {\r\n        try {\r\n            const res = await twelvedata.get<Result>('https://api.twelvedata.com/stocks?source=docs&exchange=BMV');\r\n            setActions(res.data.data)\r\n            setIsLoading(false)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadActions();\r\n    }, [])\r\n\r\n    return {\r\n        actions,\r\n        isLoading\r\n    }\r\n}\r\n\r\nexport default useGetActions\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from 'react';\nimport twelvedata from '../api/twelvedataAPI';\nimport users from '../api/users';\nimport { userContext } from '../context/UserContext';\n\nconst useGetActions = () => {\n  _s();\n\n  const [actions, setActions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const {\n    user\n  } = useContext(userContext);\n  const [actionsUser, setActionsUser] = useState([]);\n\n  const loadActions = async () => {\n    try {\n      const res = await twelvedata.get('https://api.twelvedata.com/stocks?source=docs&exchange=BMV');\n      setActions(res.data.data);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const loadActionsUser = async () => {\n    try {\n      const res = await users.post('/getActionsUser', {\n        user: user.id\n      });\n      setActionsUser(res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    loadActions();\n  }, []);\n  useEffect(() => {\n    loadActionsUser();\n  }, [actionsUser]);\n  return {\n    actions,\n    actionsUser,\n    isLoading\n  };\n};\n\n_s(useGetActions, \"0Yb4uBOwFsI798wS+edwGQY2tuI=\");\n\nexport default useGetActions;","map":{"version":3,"sources":["C:/Users/xenei/Desktop/origin-test/client/src/hooks/useGetActions.tsx"],"names":["useState","useEffect","useContext","twelvedata","users","userContext","useGetActions","actions","setActions","isLoading","setIsLoading","user","actionsUser","setActionsUser","loadActions","res","get","data","error","console","log","loadActionsUser","post","id"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAExB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAY,EAAZ,CAAtC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAWT,UAAU,CAACG,WAAD,CAA3B;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAY,EAAZ,CAA9C;;AAEA,QAAMc,WAAW,GAAG,YAAY;AAC5B,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMZ,UAAU,CAACa,GAAX,CAAuB,4DAAvB,CAAlB;AACAR,MAAAA,UAAU,CAACO,GAAG,CAACE,IAAJ,CAASA,IAAV,CAAV;AACAP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAJD,CAIE,OAAOQ,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GARD;;AAUA,QAAMG,eAAe,GAAG,YAAY;AAChC,QAAI;AACA,YAAMN,GAAG,GAAG,MAAMX,KAAK,CAACkB,IAAN,CAAW,iBAAX,EAA6B;AAAEX,QAAAA,IAAI,EAAEA,IAAI,CAACY;AAAb,OAA7B,CAAlB;AACAV,MAAAA,cAAc,CAACE,GAAG,CAACE,IAAL,CAAd;AACH,KAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAPD;;AASAjB,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,WAAW;AACd,GAFQ,EAEN,EAFM,CAAT;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACZoB,IAAAA,eAAe;AAClB,GAFQ,EAEN,CAACT,WAAD,CAFM,CAAT;AAIA,SAAO;AACHL,IAAAA,OADG;AAEHK,IAAAA,WAFG;AAGHH,IAAAA;AAHG,GAAP;AAKH,CAvCD;;GAAMH,a;;AAyCN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect, useContext } from 'react';\r\nimport twelvedata from '../api/twelvedataAPI';\r\nimport users from '../api/users';\r\nimport { Actions, Result } from '../interfaces/twelvedataAPI';\r\nimport { userContext } from '../context/UserContext';\r\n\r\nconst useGetActions = () => {\r\n\r\n    const [actions, setActions] = useState<Actions[]>([]);\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const { user } = useContext(userContext);\r\n    const [actionsUser, setActionsUser] = useState<Actions[]>([]);\r\n\r\n    const loadActions = async () => {\r\n        try {\r\n            const res = await twelvedata.get<Result>('https://api.twelvedata.com/stocks?source=docs&exchange=BMV');\r\n            setActions(res.data.data)\r\n            setIsLoading(false)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const loadActionsUser = async () => {\r\n        try {\r\n            const res = await users.post('/getActionsUser',{ user: user.id })\r\n            setActionsUser(res.data)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadActions();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        loadActionsUser();\r\n    }, [actionsUser])\r\n\r\n    return {\r\n        actions,\r\n        actionsUser,\r\n        isLoading\r\n    }\r\n}\r\n\r\nexport default useGetActions\r\n"]},"metadata":{},"sourceType":"module"}